#!/bin/sh

# Shell Functions.

function col() { 
    awk '{print $'$(echo $* | sed -e 's/ /,$/g')'}'; 
}


# Awk calculator.
function calc () {
    awk "BEGIN { print $* }" ;
}


# Add a path to the global PATH.
function pathmunge () {
    if ! echo $PATH | /bin/egrep -q "(^|:)$1($|:)" ; then
       if [ "$2" = "after" ] ; then
          PATH=$PATH:$1
       else
          PATH=$1:$PATH
       fi
    fi
}

# .. - Does a 'cd ..'
# .. 3 - Does a 'cd ../../..'
#
# Usage .. [n]
# Go up n-levels.
# i.e.: .. 3 will go up 3 levels 
function .. (){
	local arg=${1:-1};
	local dir=""
	while [ $arg -gt 0 ]; do
		dir="../$dir"
		arg=$(($arg - 1));
	done
	cd $dir >&/dev/null
}

# Usage ... Thing/Some
# Go up until you encounter Thing/Some, then go there
# i.e.: I'm in /usr/share/X11
# ... src will go up to /usr, then change to /usr/src 
function ... (){
	if [ -z "$1" ]; then
		return
	fi
	local maxlvl=16
	local dir=$1
	while [ $maxlvl -gt 0 ]; do
		dir="../$dir"
		maxlvl=$(($maxlvl - 1));
		if [ -d "$dir" ]; then 
			cd $dir >&/dev/null
		fi
	done
}


# Change extensions of specified files.
function chext(){
    local fname
    local new_ext="$1"
    shift
    IFS=$'\n'
    for fname in $@
    do
        mv "$fname" "${fname%.*}.$new_ext"
    done
}


# Execute a command via SSH on a set of machines.
function cluster () {
    for mach in $CLUSTER; do 
        (echo -n "$mach: "; ssh -q $mach $*) 
    done
}


# Yum update a set of hosts.
function clupdate () {
    for mach in $CLUSTER; do 
        echo -n "$mach: "
        ssh -q -t $mach sudo yum update -q -y 
        if [ $? -ne 0 ]; then 
            break
        fi
    done
}


tools()
{
    pushd . >/dev/null
    brtop
    if [ -d $(pwd)/tools ]; then
        PATH=${PATH/$TOOLS:/}
        TOOLS=$(pwd)/tools/cm
        pathmunge ${TOOLS}
        #PATH=${TOOLS}:${PATH}
        echo $TOOLS
    fi
    popd >/dev/null
}

# Determine if proxy is needed.
function checkproxy {
	IP_ADDR=`ip addr | grep inet | egrep '(eth|em)[0-9]' | awk '{print $2}' | awk -F/ '{print $1}'`
	SUBNET=`echo ${IP_ADDR} | awk -F. '{printf("%s.%s.%s", $1, $2, $3);}'`
	if [ "$SUBNET" == "193.120.91" -o "$SUBNET" == "192.168.91" -o "$SUBNET" == "192.168.92" -o "$SUBNET" == "192.168.93" ]; then
		export https_proxy="http://193.120.90.34:3128"
		export http_proxy="http://193.120.90.34:3128"
		export no_proxy="localhost,127.0.0.0/8,10.0.0.0/8,192.168.0.0/16,172.16.0.0/12,193.120.60.0/24,193.120.61.0/24,193.120.63.0/24,193.120.66.0/24,193.120.88.0/24,193.120.89.0/24,193.120.90.0/24,193.120.91.0/24,172.18.3.0/24,130.139.161.134,intranet.s3group.com,helpdesk.s3group.com,*.cork.s3group.com,*.dublin.s3group.com,*.wroclaw.s3group.com"
		rm -f ~/.subversion/servers ~/.subversion/config
		ln -sf ~/.subversion/servers.proxy ~/.subversion/servers
		ln -sf ~/.subversion/config.work ~/.subversion/config
	else
		unset https_proxy
		unset http_proxy
		unset no_proxy
		rm -f ~/.subversion/servers ~/.subversion/config
		ln -sf ~/.subversion/servers.noproxy ~/.subversion/servers
		ln -sf ~/.subversion/config.home ~/.subversion/config
	fi
}


# Create a new git repo with one README commit and CD into it
function git.nr() { 
	mkdir $1
	cd $1
	git init
	touch README
	git add README
	git commit -m "First commit."
}


function find.name() {
  wild=\'\*$1\*\'
  sh -c "find . -iname $wild"
}


# From Eli Bendersky
# http://eli.thegreenplace.net/2013/06/11/keeping-persistent-history-in-bash/
function log_bash_persistent_history() {
  [[
    $(history 1) =~ ^\ *[0-9]+\ +([^\ ]+\ [^\ ]+)\ +(.*)$
  ]]
  local date_part="${BASH_REMATCH[1]}"
  local command_part="${BASH_REMATCH[2]}"
  if [ "$command_part" != "$PERSISTENT_HISTORY_LAST" ]; then
	echo $HOSTNAME "|" $date_part "|" "$command_part" >> ~/.persistent_history`
    export PERSISTENT_HISTORY_LAST="$command_part"
  fi
}

