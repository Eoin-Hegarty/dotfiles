#!/bin/sh

# Shell Functions.

function killxscreensaver()
{
    pkill xscreensaver
    echo ""
    return
}


function col { 
    awk '{print $'$(echo $* | sed -e 's/ /,$/g')'}'; 
}


# Awk calculator.
function calc {
    awk "BEGIN { print $* }" ;
}


# Add a path to the global PATH.
function pathmunge {
    if ! echo $PATH | /bin/egrep -q "(^|:)$1($|:)" ; then
       if [ "$2" = "after" ] ; then
          PATH=$PATH:$1
       else
          PATH=$1:$PATH
       fi
    fi
}

# .. - Does a 'cd ..'
# .. 3 - Does a 'cd ../../..'
#
# Usage .. [n]
# Go up n-levels.
# i.e.: .. 3 will go up 3 levels 
function .. {
	local arg=${1:-1};
	local dir=""
	while [ $arg -gt 0 ]; do
		dir="../$dir"
		arg=$(($arg - 1));
	done
	cd $dir >&/dev/null
}

# Usage ... Thing/Some
# Go up until you encounter Thing/Some, then go there
# i.e.: I'm in /usr/share/X11
# ... src will go up to /usr, then change to /usr/src 
function ... {
	if [ -z "$1" ]; then
		return
	fi
	local maxlvl=16
	local dir=$1
	while [ $maxlvl -gt 0 ]; do
		dir="../$dir"
		maxlvl=$(($maxlvl - 1));
		if [ -d "$dir" ]; then 
			cd $dir >&/dev/null
		fi
	done
}


# Change extensions of specified files.
function chext {
    local fname
    local new_ext="$1"
    shift
    IFS=$'\n'
    for fname in $@
    do
        mv "$fname" "${fname%.*}.$new_ext"
    done
}


# Execute a command via SSH on a set of machines.
function cluster {
    for mach in $CLUSTER; do 
        (echo -n "$mach: "; ssh -q $mach $*) 
    done
}


# Yum update a set of hosts.
function clupdate {
    for mach in $CLUSTER; do 
        echo -n "$mach: "
        ssh -q -t $mach sudo yum update -q -y 
        if [ $? -ne 0 ]; then 
            break
        fi
    done
}


function tools {
    pushd . >/dev/null
    brtop
    if [ -d $(pwd)/tools ]; then
        PATH=${PATH/$TOOLS:/}
        TOOLS=$(pwd)/tools/cm
        pathmunge ${TOOLS}
        #PATH=${TOOLS}:${PATH}
        echo $TOOLS
    fi
    popd >/dev/null
}


# Determine if proxy is needed.
function checkproxy {
    NETDEV=`netstat -nr | grep '^0.0.0.0' | awk '{print $8}'`
    #IP_ADDR=`ip addr | grep inet | egrep '(eth|em)[0-9]' | awk '{print $2}' | awk -F/ '{print $1}'`
    IP_ADDR=`/sbin/ifconfig $NETDEV | grep inet | grep -v inet6 | awk '{print $2}' | sed 's/addr://'`
    SUBNET=`echo ${IP_ADDR} | awk -F. '{printf("%s.%s.%s", $1, $2, $3);}'`
    if [ "$SUBNET" == "193.120.91" -o "$SUBNET" == "192.168.91" -o "$SUBNET" == "192.168.92" -o "$SUBNET" == "192.168.93" ]; then
        proxyon
    else
        proxyoff
    fi
}


# Gnome: set proxy.
# Args: 
# 1: mode - 'none', 'manual', 'auto'.
# 2: mode=none: ignored
#    mode=manual: host
#    mode=auto: url
# 3: mode=manual: port
function gnomeproxy {
    if [ -z "$DISPLAY" ]; then
        return
    fi
    machineid=$(dbus-uuidgen --get)
    export $(DISPLAY=':0.0' dbus-launch --autolaunch="$machineid")
    ignorelist=`echo $no_proxy | sed 's/^\[\(.*\)\]$/\1/'`
    quoted_ignorelist=`echo $ignorelist | sed "s/[^,]\+/'\0'/g"`
    gnome3_ignorelist="[${quoted_ignorelist}]"
    gsettings set org.gnome.system.proxy ignore-hosts "${gnome3_ignorelist}"
    if [ "$1" == 'auto' ]; then
        #echo "Setting auto proxy url: $2"
        gsettings set org.gnome.system.proxy autoconfig-url "$2"
        gsettings set org.gnome.system.proxy.http enabled 'true'
        gsettings set org.gnome.system.proxy mode 'auto'
    elif [ "$1" == 'manual' ]; then
        #echo "Setting manual proxy: $2 $3"
        gsettings set org.gnome.system.proxy.http host "$2"
        gsettings set org.gnome.system.proxy.http port "$3"
        gsettings set org.gnome.system.proxy use-same-proxy "true"
        gsettings set org.gnome.system.proxy.https host "$2"
        gsettings set org.gnome.system.proxy.https port "$3"
        gsettings set org.gnome.system.proxy.ftp host "$2"
        gsettings set org.gnome.system.proxy.ftp port "$3"
        gsettings set org.gnome.system.proxy.socks host "$2"
        gsettings set org.gnome.system.proxy.socks port "$3"
        gsettings set org.gnome.system.proxy.http enabled 'true'
        gsettings set org.gnome.system.proxy mode 'manual'
	else
        gsettings set org.gnome.system.proxy.http enabled 'false'
        gsettings set org.gnome.system.proxy mode 'none'
	fi
}


# Turn on proxy.
function proxyon {
    #export http_proxy="http://193.120.90.34:3128/"
    #export http_proxy="http://avproxyvlan.dublin.s3group.com:8080/"
    export http_proxy="http://avproxylan.dublin.s3group.com:8080/"
    #export https_proxy="http://193.120.90.34:3128/"
    #export https_proxy="http://avproxyvlan.dublin.s3group.com:8080/"
    export https_proxy="http://avproxylan.dublin.s3group.com:8080/"
    export no_proxy="localhost,192.168.249.25,193.120.88.18,192.168.249.59,.s3group.com"
    rm -f ~/.subversion/servers ~/.subversion/config
    ln -sf ~/.subversion/servers.proxy ~/.subversion/servers
    ln -sf ~/.subversion/config.work ~/.subversion/config
    ~/dotfiles/sublime-text/sublime-set-proxy.py $http_proxy/
    ~/dotfiles/atom/atom-set-proxy.py $https_proxy/
    # if [ ! -z "$DISPLAY" ]; then 
        # echo "Enabling Gnome proxy..."
        gnomeproxy "auto" "http://proxy.s3group.com/proxy.pac"
    # fi
    # echo "Proxy enabled."
}


# Turn off proxy.
function proxyoff {
    unset https_proxy
    unset http_proxy
    unset no_proxy
    unset ftp_proxy
    unset all_proxy
    unset HTTPS_PROXY
    unset HTTP_PROXY
    unset NO_PROXY
    unset FTP_PROXY
    unset ALL_PROXY
    rm -f ~/.subversion/servers ~/.subversion/config
    ln -sf ~/.subversion/servers.noproxy ~/.subversion/servers
    ln -sf ~/.subversion/config.home ~/.subversion/config
    ~/dotfiles/sublime-text/sublime-set-proxy.py
    ~/dotfiles/atom/atom-set-proxy.py
    # if [ ! -z "$DISPLAY" ]; then 
        # echo "Disabling Gnome proxy..."
        gnomeproxy "none"
    # fi
    # echo "Proxy disabled."
}


# Toggle proxy.
function proxy {
    if [ -z "$http_proxy" ]; then
        proxyon
    else
        proxyoff
    fi
}


# Create a new git repo with one README commit and cd into it
function git.nr() { 
	mkdir $1
	cd $1
	git init
	touch README
	git add README
	git commit -m "First commit."
}


function find.name() {
    wild=\'\*$1\*\'
    sh -c "find . -iname $wild"
}


# From Eli Bendersky
# http://eli.thegreenplace.net/2013/06/11/keeping-persistent-history-in-bash/
function log_bash_persistent_history() {
    [[ $(history 1) =~ ^\ *[0-9]+\ +([^\ ]+\ [^\ ]+)\ +(.*)$ ]]
    local date_part="${BASH_REMATCH[1]}"
    local command_part="${BASH_REMATCH[2]}"
    if [ "$command_part" != "$PERSISTENT_HISTORY_LAST" ]; then
        echo "$HOSTNAME | $date_part | $command_part" >> ~/.persistent_history
        export PERSISTENT_HISTORY_LAST="$command_part"
    fi
}

# gitignore.io
# http://www.gitignore.io/cli
function gi() {
    curl http://www.gitignore.io/api/$@ ; 
}

# CMF Git wrapper
function cmf() {
    if [ -z "$1" -o -z "$2" ]; then
        echo "usage: cmf <gitcmd> <path>"
        return
    fi
    local baseurl="https://code.rdkcentral.com/r"
    git $1 ${baseurl}/$2 $3 $4 $5 $6 $7 $8 $9
}

# CCP Git wrapper
function ccp() {
    if [ -z "$1" -o -z "$2" ]; then
        echo "usage: cmf <gitcmd> <path>"
        return
    fi
    local baseurl="https://gerrit.teamccp.com/rdk"
    git $1 ${baseurl}/$2 $3 $4 $5 $6 $7 $8 $9
}

